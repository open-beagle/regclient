# syntax=docker/dockerfile:1

ARG REGISTRY=docker.io
ARG ALPINE_VER=3@sha256:124c7d2707904eea7431fffe91522a01e5a861a624ee31d03372cc1d138a3126
ARG GO_VER=1.20-alpine@sha256:08e9c086194875334d606765bd60aa064abd3c215abfbcf5737619110d48d114
ARG ECR_HELPER_VER=077b4a917a90e9f927e4207f8b6d22f9a057b7cb
ARG GCR_HELPER_VER=62afb2723512fd6572c6300024e0c94f734b0ae3
ARG LUNAJSON_COMMIT=e6063d37de97dfdfe2749e24de949472bfad0945
ARG SEMVER_COMMIT=af495adc857d51fd1507a112be18523828a1da0d

FROM --platform=$BUILDPLATFORM ${REGISTRY}/library/golang:${GO_VER} as golang
RUN apk add --no-cache \
      ca-certificates \
      git \
      make
RUN addgroup -g 1000 appuser \
 && adduser -u 1000 -G appuser -D appuser \
 && mkdir -p /home/appuser/.docker \
 && chown -R appuser /home/appuser
WORKDIR /src

FROM --platform=$BUILDPLATFORM golang as dev
COPY . /src/
ENV PATH=${PATH}:/src/bin
CMD make bin/regbot && bin/regbot

FROM --platform=$BUILDPLATFORM dev as build
ARG TARGETOS
ARG TARGETARCH
RUN --mount=type=cache,id=gomod,target=/go/pkg/mod/cache \
    --mount=type=cache,id=goroot,target=/root/.cache/go-build \
    GOOS=${TARGETOS} GOARCH=${TARGETARCH} \
    make vendor bin/regbot
USER appuser
CMD [ "bin/regbot" ]

FROM scratch as artifact
COPY --from=build /src/bin/regbot /regbot

FROM --platform=$BUILDPLATFORM golang as docker-cred-ecr-login
ARG TARGETOS
ARG TARGETARCH
ARG ECR_HELPER_VER
RUN --mount=type=cache,id=gomod,target=/go/pkg/mod/cache \
    --mount=type=cache,id=goroot,target=/root/.cache/go-build \
    GOOS=${TARGETOS} GOARCH=${TARGETARCH} CGO_ENABLED=0 \
    go install -trimpath -ldflags=-buildid= github.com/awslabs/amazon-ecr-credential-helper/ecr-login/cli/docker-credential-ecr-login@${ECR_HELPER_VER} \
 && ( cp "${GOPATH}/bin/docker-credential-ecr-login" /usr/local/bin/docker-credential-ecr-login \
   || cp "${GOPATH}/bin/${TARGETOS}_${TARGETARCH}/docker-credential-ecr-login" /usr/local/bin/docker-credential-ecr-login )

FROM --platform=$BUILDPLATFORM golang as docker-cred-gcr
ARG TARGETOS
ARG TARGETARCH
ARG GCR_HELPER_VER
RUN --mount=type=cache,id=gomod,target=/go/pkg/mod/cache \
    --mount=type=cache,id=goroot,target=/root/.cache/go-build \
    GOOS=${TARGETOS} GOARCH=${TARGETARCH} CGO_ENABLED=0 \
    go install -trimpath -ldflags=-buildid= github.com/GoogleCloudPlatform/docker-credential-gcr@${GCR_HELPER_VER} \
 && ( cp "${GOPATH}/bin/docker-credential-gcr" /usr/local/bin/docker-credential-gcr \
   || cp "${GOPATH}/bin/${TARGETOS}_${TARGETARCH}/docker-credential-gcr" /usr/local/bin/docker-credential-gcr )

FROM --platform=$BUILDPLATFORM ${REGISTRY}/library/alpine:${ALPINE_VER} as lua-mods
# COPY may pull in old timestamps, use a touch command below to reset them
COPY cmd/regbot/lua/ /lua/
ARG LUNAJSON_COMMIT
ARG SEMVER_COMMIT
RUN apk add curl \
 && mkdir -p /lua/lunajson \
 && curl -fL https://raw.githubusercontent.com/grafi-tt/lunajson/${LUNAJSON_COMMIT}/src/lunajson.lua > /lua/lunajson.lua \
 && curl -fL https://raw.githubusercontent.com/grafi-tt/lunajson/${LUNAJSON_COMMIT}/src/lunajson/decoder.lua > /lua/lunajson/decoder.lua \
 && curl -fL https://raw.githubusercontent.com/grafi-tt/lunajson/${LUNAJSON_COMMIT}/src/lunajson/encoder.lua > /lua/lunajson/encoder.lua \
 && curl -fL https://raw.githubusercontent.com/grafi-tt/lunajson/${LUNAJSON_COMMIT}/src/lunajson/sax.lua > /lua/lunajson/sax.lua \
 && curl -fL https://raw.githubusercontent.com/kikito/semver.lua/${SEMVER_COMMIT}/semver.lua > /lua/semver.lua \
 && cd /lua \
 && ln -s lunajson.lua json.lua \
 && find . -exec touch '{}' \;

FROM ${REGISTRY}/library/alpine:${ALPINE_VER} as release-alpine
COPY --from=build /etc/passwd /etc/group /etc/
COPY --from=build /etc/ssl/certs/ca-certificates.crt /etc/ssl/certs/
COPY --from=build --chown=1000:1000 /home/appuser /home/appuser
COPY --from=docker-cred-ecr-login /usr/local/bin/docker-credential-* /usr/local/bin/
COPY --from=docker-cred-gcr /usr/local/bin/docker-credential-* /usr/local/bin/
COPY --from=build /src/bin/regbot /usr/local/bin/regbot
COPY --from=lua-mods /lua /lua-mods
ENV LUA_PATH="?;?.lua;/lua-user/?;/lua-user/?.lua;/lua-mods/?;/lua-mods/?.lua"
USER appuser
CMD [ "regbot", "--help" ]

ARG BUILD_DATE
ARG VCS_REF
LABEL maintainer="" \
      org.opencontainers.image.created=$BUILD_DATE \
      org.opencontainers.image.authors="Regclient contributors" \
      org.opencontainers.image.url="https://github.com/regclient/regclient" \
      org.opencontainers.image.documentation="https://github.com/regclient/regclient" \
      org.opencontainers.image.source="https://github.com/regclient/regclient" \
      org.opencontainers.image.version="latest" \
      org.opencontainers.image.revision=$VCS_REF \
      org.opencontainers.image.vendor="" \
      org.opencontainers.image.licenses="Apache 2.0" \
      org.opencontainers.image.title="regbot" \
      org.opencontainers.image.description=""

FROM scratch as release-scratch
ADD  build/root.tgz /
COPY --from=build /etc/passwd /etc/group /etc/
COPY --from=build /etc/ssl/certs/ca-certificates.crt /etc/ssl/certs/
COPY --from=build --chown=1000:1000 /home/appuser/ /home/appuser/
COPY --from=build /src/bin/regbot /regbot
COPY --from=lua-mods /lua/ /lua-mods/
ENV LUA_PATH="?;?.lua;/lua-user/?;/lua-user/?.lua;/lua-mods/?;/lua-mods/?.lua"
USER appuser
ENTRYPOINT [ "/regbot" ]

ARG BUILD_DATE
ARG VCS_REF
LABEL maintainer="" \
      org.opencontainers.image.created=$BUILD_DATE \
      org.opencontainers.image.authors="Regclient contributors" \
      org.opencontainers.image.url="https://github.com/regclient/regclient" \
      org.opencontainers.image.documentation="https://github.com/regclient/regclient" \
      org.opencontainers.image.source="https://github.com/regclient/regclient" \
      org.opencontainers.image.version="latest" \
      org.opencontainers.image.revision=$VCS_REF \
      org.opencontainers.image.vendor="" \
      org.opencontainers.image.licenses="Apache 2.0" \
      org.opencontainers.image.title="regbot" \
      org.opencontainers.image.description=""
