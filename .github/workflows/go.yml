name: Go

on:
  push:
    branches:
      - '**'
    tags:
      - 'v*.*.*'
  pull_request:
    branches: [ main ]

jobs:

  build:
    name: Build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        gover: ["1.18", "1.19", "1.20"]

    env:
      RELEASE_GO_VER: "1.20"

    permissions:
      # id-token is used by cosign's OIDC based signing
      # https://blog.chainguard.dev/zero-friction-keyless-signing-with-github-actions/
      id-token: 'write'
      contents: 'write'
      packages: 'write'

    steps:
    - name: "Set up Go ${{ matrix.gover }}"
      uses: actions/setup-go@v4
      with:
        go-version: "${{ matrix.gover }}.x"
      id: go

    - name: Check out code
      uses: actions/checkout@v3

    - name: Get dependencies
      run: |
        go get -v -t -d ./...

    - name: Verify go fmt
      run: test -z "$(go fmt ./...)"

    - name: Verify go vet
      run: test -z "$(go vet ./...)"

    - name: Test
      run: make test

    - name: Linting
      if: matrix.gover == env.RELEASE_GO_VER
      run: make lint

    - name: Install syft
      if: startsWith( github.ref, 'refs/tags/v' ) || github.ref == 'refs/heads/main'
      uses: anchore/sbom-action/download-syft@v0.14.1
      id: syft
      with:
        syft-version: "v0.77.0"

    - name: Build artifacts
      if: startsWith( github.ref, 'refs/tags/v' ) || github.ref == 'refs/heads/main'
      run: make artifacts

    - name: Install cosign
      if: ( startsWith( github.ref, 'refs/tags/v' ) || github.ref == 'refs/heads/main' ) && matrix.gover == env.RELEASE_GO_VER
      uses: sigstore/cosign-installer@v3.0.2
      with:
        cosign-release: "v2.0.1"

    - name: Package artifacts
      if: ( startsWith( github.ref, 'refs/tags/v' ) || github.ref == 'refs/heads/main' ) && matrix.gover == env.RELEASE_GO_VER
      env:
        # experimental support needed for GitHub OIDC signing
        COSIGN_EXPERIMENTAL: "true"
      run: |
        cd artifacts
        for artifact in \
            regbot-darwin-amd64 \
            regbot-darwin-arm64 \
            regbot-linux-amd64 \
            regbot-linux-arm64 \
            regbot-linux-ppc64le \
            regbot-linux-s390x \
            regbot-windows-amd64.exe \
            regctl-darwin-amd64 \
            regctl-darwin-arm64 \
            regctl-linux-amd64 \
            regctl-linux-arm64 \
            regctl-linux-ppc64le \
            regctl-linux-s390x \
            regctl-windows-amd64.exe \
            regsync-darwin-amd64 \
            regsync-darwin-arm64 \
            regsync-linux-amd64 \
            regsync-linux-arm64 \
            regsync-linux-ppc64le \
            regsync-linux-s390x \
            regsync-windows-amd64.exe \
          ; do
          cosign sign-blob -y --output-signature "${artifact%.exe}.sig" --output-certificate "${artifact%.exe}.pem" "${artifact}"
        done
        tar -cvzf metadata.tgz *.sig *.pem *.json

    - name: Gather release details
      if: startsWith( github.ref, 'refs/tags/v' ) && github.repository_owner == 'regclient' && matrix.gover == env.RELEASE_GO_VER
      id: release_details
      run: |
        VERSION=${GITHUB_REF#refs/tags/}
        VALID_RELEASE=false
        if [ -f "release.md" ] && grep -q "Release $VERSION" release.md; then
          VALID_RELEASE=true
        fi
        RELEASE_NOTES=$(cat release.md || echo release notes unavailable)
        # escape % and linefeeds
        RELEASE_NOTES="${RELEASE_NOTES//'%'/'%25'}"
        RELEASE_NOTES="${RELEASE_NOTES//$'\n'/'%0A'}"
        RELEASE_NOTES="${RELEASE_NOTES//$'\r'/'%0D'}"
        echo ::set-output name=version::${VERSION}
        echo ::set-output name=valid::${VALID_RELEASE}
        echo ::set-output name=release_notes::${RELEASE_NOTES}

    - name: Create release
      if: steps.release_details.outputs.valid == 'true' && matrix.gover == env.RELEASE_GO_VER
      id: release_create
      uses: softprops/action-gh-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.release_details.outputs.version }}
        body: ${{ steps.release_details.outputs.release_notes }}
        draft: false
        prerelease: false
        files: |
          ./artifacts/regbot-darwin-amd64
          ./artifacts/regbot-darwin-arm64
          ./artifacts/regbot-linux-amd64
          ./artifacts/regbot-linux-arm64
          ./artifacts/regbot-linux-ppc64le
          ./artifacts/regbot-linux-s390x
          ./artifacts/regbot-windows-amd64.exe
          ./artifacts/regctl-darwin-amd64
          ./artifacts/regctl-darwin-arm64
          ./artifacts/regctl-linux-amd64
          ./artifacts/regctl-linux-arm64
          ./artifacts/regctl-linux-ppc64le
          ./artifacts/regctl-linux-s390x
          ./artifacts/regctl-windows-amd64.exe
          ./artifacts/regsync-darwin-amd64
          ./artifacts/regsync-darwin-arm64
          ./artifacts/regsync-linux-amd64
          ./artifacts/regsync-linux-arm64
          ./artifacts/regsync-linux-ppc64le
          ./artifacts/regsync-linux-s390x
          ./artifacts/regsync-windows-amd64.exe
          ./artifacts/metadata.tgz

    - name: Save artifacts
      if: github.ref == 'refs/heads/main' && matrix.gover == env.RELEASE_GO_VER
      uses: actions/upload-artifact@v3
      with:
        name: binaries
        path: ./artifacts/
        retention-days: 30
